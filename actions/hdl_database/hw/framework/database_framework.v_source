`timescale 1ns/1ps

module database_framework #(
    parameter KERNEL_NUM = NUM_KERNELS,
    // Parameters of Axi Master Bus Interface AXI_CARD_MEM0 ; to DDR memory
    parameter C_M_AXI_CARD_MEM0_ID_WIDTH     = 4,
    parameter C_M_AXI_CARD_MEM0_ADDR_WIDTH   = 33,
    parameter C_M_AXI_CARD_MEM0_DATA_WIDTH   = 512,
    parameter C_M_AXI_CARD_MEM0_AWUSER_WIDTH = 1,
    parameter C_M_AXI_CARD_MEM0_ARUSER_WIDTH = 1,
    parameter C_M_AXI_CARD_MEM0_WUSER_WIDTH  = 1,
    parameter C_M_AXI_CARD_MEM0_RUSER_WIDTH  = 1,
    parameter C_M_AXI_CARD_MEM0_BUSER_WIDTH  = 1,

    // Parameters of Axi Slave Bus Interface AXI_CTRL_REG
    parameter C_S_AXI_CTRL_REG_DATA_WIDTH    = 32,
    parameter C_S_AXI_CTRL_REG_ADDR_WIDTH    = 32,

    // Parameters of Axi Master Bus Interface AXI_HOST_MEM ; to Host memory
    parameter C_M_AXI_HOST_MEM_ID_WIDTH      = 4,
    parameter C_M_AXI_HOST_MEM_ADDR_WIDTH    = 64,
    parameter C_M_AXI_HOST_MEM_DATA_WIDTH    = 512,
    parameter C_M_AXI_KERNEL_DATA_WIDTH      = 512,
    parameter C_M_AXI_HOST_MEM_AWUSER_WIDTH  = 8,
    parameter C_M_AXI_HOST_MEM_ARUSER_WIDTH  = 8,
    parameter C_M_AXI_HOST_MEM_WUSER_WIDTH   = 1,
    parameter C_M_AXI_HOST_MEM_RUSER_WIDTH   = 1,
    parameter C_M_AXI_HOST_MEM_BUSER_WIDTH   = 1,
    parameter INT_BITS                       = 3,
    parameter CONTEXT_BITS                   = 8,

    parameter INPUT_PACKET_STAT_WIDTH        = 48,
    parameter INPUT_BATCH_WIDTH              = 512,
    parameter INPUT_BATCH_PER_PACKET         = 1,
    parameter PIPE_INDATA_WIDTH              = 64,
    //parameter CONFIG_CNT_WIDTH               = 3, // CONFIG_CNT_WIDTH = log2NUM_OF_PU;
    parameter OUTPUT_STAT_WIDTH              = 80,
    //parameter PATTERN_WIDTH                  = 448,
    parameter PATTERN_ID_WIDTH               = 32,
    parameter MAX_OR_NUM                     = 8,
    parameter MAX_TOKEN_NUM                  = 8,//16,
    parameter MAX_STATE_NUM                  = 8,//16,
    parameter MAX_TOKEN_LEN                  = 8,//16,
    parameter MAX_CHAR_NUM                   = 8,//32,
    parameter PATTERN_NUM_FL                 = 1,
    parameter PATTERN_NUM_SL                 = 1,
    parameter NUM_OF_PU                      = 1,
    parameter NUM_BUFFER_SL                  = 4,
    parameter NUM_BUFFER_TL                  = 16,
    parameter NUM_BUFFER_4THL                = 16,
    parameter NUM_STRING_MATCH_PIPELINE      = 64,
    parameter NUM_PIPELINE_IN_A_GROUP        = 1,
    parameter NUM_OF_PIPELINE_GROUP          = 64
)(
    input              clk                      ,
    input              rst_n                    ,


    //---- AXI bus interfaced with SNAP core ----
    // AXI write address channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_awid          ,
    output    [C_M_AXI_HOST_MEM_ADDR_WIDTH - 1:0] m_axi_snap_awaddr        ,
    output    [0007:0] m_axi_snap_awlen         ,
    output    [0002:0] m_axi_snap_awsize        ,
    output    [0001:0] m_axi_snap_awburst       ,
    output    [0003:0] m_axi_snap_awcache       ,
    output             m_axi_snap_awlock        ,
    output    [0002:0] m_axi_snap_awprot        ,
    output    [0003:0] m_axi_snap_awqos         ,
    output    [0003:0] m_axi_snap_awregion      ,
    output    [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0] m_axi_snap_awuser        ,
    output             m_axi_snap_awvalid       ,
    input              m_axi_snap_awready       ,
    // AXI write data channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_wid           ,
    output    [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0] m_axi_snap_wdata         ,
    output    [(C_M_AXI_HOST_MEM_DATA_WIDTH/8) - 1:0] m_axi_snap_wstrb         ,
    output             m_axi_snap_wlast         ,
    output             m_axi_snap_wvalid        ,
    input              m_axi_snap_wready        ,
    // AXI write response channel
    output             m_axi_snap_bready        ,
    input     [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_bid           ,
    input     [0001:0] m_axi_snap_bresp         ,
    input              m_axi_snap_bvalid        ,
    // AXI read address channel
    output    [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_arid          ,
    output    [C_M_AXI_HOST_MEM_ADDR_WIDTH - 1:0] m_axi_snap_araddr        ,
    output    [0007:0] m_axi_snap_arlen         ,
    output    [0002:0] m_axi_snap_arsize        ,
    output    [0001:0] m_axi_snap_arburst       ,
    output    [C_M_AXI_HOST_MEM_ARUSER_WIDTH - 1:0] m_axi_snap_aruser        ,
    output    [0003:0] m_axi_snap_arcache       ,
    output             m_axi_snap_arlock        ,
    output    [0002:0] m_axi_snap_arprot        ,
    output    [0003:0] m_axi_snap_arqos         ,
    output    [0003:0] m_axi_snap_arregion      ,
    output             m_axi_snap_arvalid       ,
    input              m_axi_snap_arready       ,
    // AXI read data channel
    output             m_axi_snap_rready        ,
    input     [C_M_AXI_HOST_MEM_ID_WIDTH - 1:0] m_axi_snap_rid           ,
    input     [C_M_AXI_HOST_MEM_DATA_WIDTH - 1:0] m_axi_snap_rdata         ,
    input     [0001:0] m_axi_snap_rresp         ,
    input              m_axi_snap_rlast         ,
    input              m_axi_snap_rvalid        ,

    /*
    //---- AXI bus interfaced with DDR ----
    // AXI write address channel
    output    [C_M_AXI_CARD_MEM0_ID_WIDTH - 1:0] m_axi_ddr_awid           ,
    output    [C_M_AXI_CARD_MEM0_ADDR_WIDTH - 1:0] m_axi_ddr_awaddr         ,
    output    [0007:0] m_axi_ddr_awlen          ,
    output    [0002:0] m_axi_ddr_awsize         ,
    output    [0001:0] m_axi_ddr_awburst        ,
    output    [0003:0] m_axi_ddr_awcache        ,
    output    [0001:0] m_axi_ddr_awlock         ,
    output    [0002:0] m_axi_ddr_awprot         ,
    output    [0003:0] m_axi_ddr_awqos          ,
    output    [0003:0] m_axi_ddr_awregion       ,
    output    [C_M_AXI_CARD_MEM0_AWUSER_WIDTH - 1:0] m_axi_ddr_awuser         ,
    output             m_axi_ddr_awvalid        ,
    input              m_axi_ddr_awready        ,
    // AXI write data channel
    output    [C_M_AXI_CARD_MEM0_ID_WIDTH - 1:0] m_axi_ddr_wid            ,
    output    [C_M_AXI_CARD_MEM0_DATA_WIDTH - 1:0] m_axi_ddr_wdata          ,
    output    [(C_M_AXI_CARD_MEM0_DATA_WIDTH/8) - 1:0] m_axi_ddr_wstrb          ,
    output             m_axi_ddr_wlast          ,
    output             m_axi_ddr_wvalid         ,
    input              m_axi_ddr_wready         ,
    // AXI write response channel
    output             m_axi_ddr_bready         ,
    input     [C_M_AXI_CARD_MEM0_ID_WIDTH - 1:0] m_axi_ddr_bid            ,
    input     [0001:0] m_axi_ddr_bresp          ,
    input              m_axi_ddr_bvalid         ,
    // AXI read address channel
    output    [C_M_AXI_CARD_MEM0_ID_WIDTH - 1:0] m_axi_ddr_arid           ,
    output    [C_M_AXI_CARD_MEM0_ADDR_WIDTH - 1:0] m_axi_ddr_araddr         ,
    output    [0007:0] m_axi_ddr_arlen          ,
    output    [0002:0] m_axi_ddr_arsize         ,
    output    [0001:0] m_axi_ddr_arburst        ,
    output    [C_M_AXI_HOST_MEM_ARUSER_WIDTH - 1:0] m_axi_ddr_aruser         ,
    output    [0003:0] m_axi_ddr_arcache        ,
    output    [0001:0] m_axi_ddr_arlock         ,
    output    [0002:0] m_axi_ddr_arprot         ,
    output    [0003:0] m_axi_ddr_arqos          ,
    output    [0003:0] m_axi_ddr_arregion       ,
    output             m_axi_ddr_arvalid        ,
    input              m_axi_ddr_arready        ,
    // AXI  ead data channel
    output             m_axi_ddr_rready         ,
    input     [C_M_AXI_CARD_MEM0_ID_WIDTH - 1:0] m_axi_ddr_rid            ,
    input     [C_M_AXI_CARD_MEM0_DATA_WIDTH - 1:0] m_axi_ddr_rdata          ,
    input     [0001:0] m_axi_ddr_rresp          ,
    input              m_axi_ddr_rlast          ,
    input              m_axi_ddr_rvalid         ,
    */

    //---- AXI Lite bus interfaced with SNAP core ----
    // AXI write address channel
    output             s_axi_snap_awready       ,
    input     [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0] s_axi_snap_awaddr        ,
    input     [0002:0] s_axi_snap_awprot        ,
    input              s_axi_snap_awvalid       ,
    // axi write data channel
    output             s_axi_snap_wready        ,
    input     [C_S_AXI_CTRL_REG_DATA_WIDTH - 1:0] s_axi_snap_wdata         ,
    input     [(C_S_AXI_CTRL_REG_DATA_WIDTH/8) - 1:0] s_axi_snap_wstrb         ,
    input              s_axi_snap_wvalid        ,
    // AXI response channel
    output    [0001:0] s_axi_snap_bresp         ,
    output             s_axi_snap_bvalid        ,
    input              s_axi_snap_bready        ,
    // AXI read address channel
    output             s_axi_snap_arready       ,
    input              s_axi_snap_arvalid       ,
    input     [C_S_AXI_CTRL_REG_ADDR_WIDTH - 1:0] s_axi_snap_araddr        ,
    input     [0002:0] s_axi_snap_arprot        ,
    // AXI read data channel
    output    [C_S_AXI_CTRL_REG_DATA_WIDTH - 1:0] s_axi_snap_rdata         ,
    output    [0001:0] s_axi_snap_rresp         ,
    input              s_axi_snap_rready        ,
    output             s_axi_snap_rvalid        ,

    // Other signals
    input              i_app_ready              ,
    input      [31:0]  i_action_type            ,
    input      [31:0]  i_action_version         ,
    output             o_interrupt              ,
    input              i_interrupt_ack
    );

    wire      [KERNEL_NUM-1:0]         kernel_o_complete ;
    wire      [KERNEL_NUM-1:0]         kernel_complete_p ;
    wire      [KERNEL_NUM-1:0]         kernel_i_start    ;
    wire                               new_job           ;
    wire                               job_done          ;
    wire                               job_start         ;
    wire      [63:0]                   init_addr         ;
    wire      [63:0]                   completion_addr   ;
    wire      [31:0]                   completion_size   ;
    wire                               manager_start     ;
    wire                               run_mode          ;
    wire      [511:0]                  system_register   ;
    wire      [511:0]                  user_register     ;

    // AXI write address channel
    wire                                                kernel_m_axi_snap_awid [KERNEL_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH -1 :0]          kernel_m_axi_snap_awaddr [KERNEL_NUM-1:0];
    wire   [0007:0]                                     kernel_m_axi_snap_awlen [KERNEL_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_awsize [KERNEL_NUM-1:0];
    wire   [0001:0]                                     kernel_m_axi_snap_awburst [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awcache [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_awlock [KERNEL_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_awprot [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awqos [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_awregion [KERNEL_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0]        kernel_m_axi_snap_awuser [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_awvalid [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_awready [KERNEL_NUM-1:0];
    // AXI write data channel
    wire                                                kernel_m_axi_snap_wid [KERNEL_NUM-1:0];
    wire   [C_M_AXI_KERNEL_DATA_WIDTH - 1:0]            kernel_m_axi_snap_wdata [KERNEL_NUM-1:0];
    wire   [(C_M_AXI_KERNEL_DATA_WIDTH/8) - 1:0]        kernel_m_axi_snap_wstrb [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_wlast [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_wvalid [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_wready [KERNEL_NUM-1:0];
    // AXI write response channel
    wire                                                kernel_m_axi_snap_bready [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_bid [KERNEL_NUM-1:0];
    wire   [1:0]                                        kernel_m_axi_snap_bresp [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_bvalid [KERNEL_NUM-1:0];
    // AXI read address channel
    wire                                                kernel_m_axi_snap_arid [KERNEL_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH-1:0]            kernel_m_axi_snap_araddr [KERNEL_NUM-1:0];
    wire   [0007:0]                                     kernel_m_axi_snap_arlen [KERNEL_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_arsize [KERNEL_NUM-1:0];
    wire   [0001:0]                                     kernel_m_axi_snap_arburst [KERNEL_NUM-1:0];
    wire   [C_M_AXI_HOST_MEM_ARUSER_WIDTH-1:0]          kernel_m_axi_snap_aruser [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arcache [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_arlock [KERNEL_NUM-1:0];
    wire   [0002:0]                                     kernel_m_axi_snap_arprot [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arqos [KERNEL_NUM-1:0];
    wire   [0003:0]                                     kernel_m_axi_snap_arregion [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_arvalid [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_arready [KERNEL_NUM-1:0];
    // AXI read data channel
    wire                                                kernel_m_axi_snap_rready [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_rid [KERNEL_NUM-1:0];
    wire    [C_M_AXI_KERNEL_DATA_WIDTH - 1:0]           kernel_m_axi_snap_rdata [KERNEL_NUM-1:0];
    wire    [1:0]                                       kernel_m_axi_snap_rresp [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_rlast [KERNEL_NUM-1:0];
    wire                                                kernel_m_axi_snap_rvalid [KERNEL_NUM-1:0];

    // AXI write address channel
    //wire                                                job_m_axi_snap_awid;
    //wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH -1 :0]          job_m_axi_snap_awaddr;
    //wire   [0007:0]                                     job_m_axi_snap_awlen;
    //wire   [0002:0]                                     job_m_axi_snap_awsize;
    //wire   [0001:0]                                     job_m_axi_snap_awburst;
    //wire   [0003:0]                                     job_m_axi_snap_awcache;
    //wire                                                job_m_axi_snap_awlock;
    //wire   [0002:0]                                     job_m_axi_snap_awprot;
    //wire   [0003:0]                                     job_m_axi_snap_awqos;
    //wire   [0003:0]                                     job_m_axi_snap_awregion;
    //wire   [C_M_AXI_HOST_MEM_AWUSER_WIDTH - 1:0]        job_m_axi_snap_awuser;
    //wire                                                job_m_axi_snap_awvalid;
    //wire                                                job_m_axi_snap_awready;
    //                                                           // AXI write data channel
    //wire                                                job_m_axi_snap_wid;
    //wire   [511:0]                                      job_m_axi_snap_wdata;
    //wire   [63:0]                                       job_m_axi_snap_wstrb;
    //wire                                                job_m_axi_snap_wlast;
    //wire                                                job_m_axi_snap_wvalid;
    //wire                                                job_m_axi_snap_wready;
    //                                                           // AXI write response channel
    //wire                                                job_m_axi_snap_bready;
    //wire                                                job_m_axi_snap_bid;
    //wire   [1:0]                                        job_m_axi_snap_bresp;
    //wire                                                job_m_axi_snap_bvalid;
    //                                                           // AXI read address channel
    //wire                                                job_m_axi_snap_arid;
    //wire   [C_M_AXI_HOST_MEM_ADDR_WIDTH-1:0]            job_m_axi_snap_araddr;
    //wire   [0007:0]                                     job_m_axi_snap_arlen;
    //wire   [0002:0]                                     job_m_axi_snap_arsize;
    //wire   [0001:0]                                     job_m_axi_snap_arburst;
    //wire   [C_M_AXI_HOST_MEM_ARUSER_WIDTH-1:0]          job_m_axi_snap_aruser;
    //wire   [0003:0]                                     job_m_axi_snap_arcache;
    //wire                                                job_m_axi_snap_arlock;
    //wire   [0002:0]                                     job_m_axi_snap_arprot;
    //wire   [0003:0]                                     job_m_axi_snap_arqos;
    //wire   [0003:0]                                     job_m_axi_snap_arregion;
    //wire                                                job_m_axi_snap_arvalid;
    //wire                                                job_m_axi_snap_arready;
    //                                                           // AXI read data channel
    //wire                                                job_m_axi_snap_rready;
    //wire                                                job_m_axi_snap_rid;
    //wire    [511:0]                                     job_m_axi_snap_rdata;
    //wire    [1:0]                                       job_m_axi_snap_rresp;
    //wire                                                job_m_axi_snap_rlast;
    //wire                                                job_m_axi_snap_rvalid;

    //////////////////////////////////////////////////////////////////////////
    // AXI lite. Has KERNEL_NUM + 1 slaves
    //
    // signal [0]  ----> kernel 0 --> 0x200
    // signal [1]  ----> kernel 1 --> 0x300
    // signal [2]  ----> kernel 2 --> 0x400
    // signal [3]  ----> kernel 3 --> 0x500
    // signal [4]  ----> kernel 4 --> 0x600
    // signal [5]  ----> kernel 5 --> 0x700
    // signal [6]  ----> kernel 6 --> 0x800
    // signal [7]  ----> kernel 7 --> 0x900
    // signal [8]  ----> kernel 8 --> 0xA00
    // signal [9]  ----> kernel 9 --> 0xB00
    // signal [10] ----> kernel 10 --> 0xC00
    // signal [11] ----> kernel 11 --> 0xD00
    // signal [KERNEL_NUM] ------> global registers (0x000-0x0FF)

    wire               kernel_s_axi_snap_awready [KERNEL_NUM:0];
    wire [31:0]        kernel_s_axi_snap_awaddr [KERNEL_NUM:0];
    wire [2:0]         kernel_s_axi_snap_awprot [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_awvalid [KERNEL_NUM:0];
    // axi write data channel
    wire               kernel_s_axi_snap_wready [KERNEL_NUM:0];
    wire [31:0]        kernel_s_axi_snap_wdata [KERNEL_NUM:0];
    wire [3:0]         kernel_s_axi_snap_wstrb [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_wvalid [KERNEL_NUM:0];
    // AXI response channel
    wire [1:0]         kernel_s_axi_snap_bresp [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_bvalid [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_bready [KERNEL_NUM:0];
    // AXI read address channel
    wire               kernel_s_axi_snap_arready [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_arvalid [KERNEL_NUM:0];
    wire [31:0]        kernel_s_axi_snap_araddr [KERNEL_NUM:0];
    wire [2:0]         kernel_s_axi_snap_arprot [KERNEL_NUM:0];
    // AXI read data channel
    wire [31:0]        kernel_s_axi_snap_rdata [KERNEL_NUM:0];
    wire [1:0]         kernel_s_axi_snap_rresp [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_rready [KERNEL_NUM:0];
    wire               kernel_s_axi_snap_rvalid [KERNEL_NUM:0];
    //Instantiate kernels

    genvar i;
    generate
        #if defined(VITIS_GQEJOIN_ENABLE)
        for (i = 0; i < KERNEL_NUM/4; i = i + 1) begin:k_inst
        #else
        for (i = 0; i < KERNEL_NUM; i = i + 1) begin:k_inst
        #endif

            #if defined(REGEX_ENGINE_ENABLE)
            action_string_match #(
                // Parameters of Axi Master Bus Interface AXI_CARD_MEM0 ; to DDR memory
                .C_M_AXI_CARD_MEM0_ID_WIDTH    (C_M_AXI_CARD_MEM0_ID_WIDTH    ),
                .C_M_AXI_CARD_MEM0_ADDR_WIDTH  (C_M_AXI_CARD_MEM0_ADDR_WIDTH  ),
                .C_M_AXI_CARD_MEM0_DATA_WIDTH  (C_M_AXI_CARD_MEM0_DATA_WIDTH  ),
                .C_M_AXI_CARD_MEM0_AWUSER_WIDTH(C_M_AXI_CARD_MEM0_AWUSER_WIDTH),
                .C_M_AXI_CARD_MEM0_ARUSER_WIDTH(C_M_AXI_CARD_MEM0_ARUSER_WIDTH),
                .C_M_AXI_CARD_MEM0_WUSER_WIDTH (C_M_AXI_CARD_MEM0_WUSER_WIDTH ),
                .C_M_AXI_CARD_MEM0_RUSER_WIDTH (C_M_AXI_CARD_MEM0_RUSER_WIDTH ),
                .C_M_AXI_CARD_MEM0_BUSER_WIDTH (C_M_AXI_CARD_MEM0_BUSER_WIDTH ),

                // Parameters of Axi Slave Bus Interface AXI_CTRL_REG
                .C_S_AXI_CTRL_REG_DATA_WIDTH   (C_S_AXI_CTRL_REG_DATA_WIDTH   ),
                .C_S_AXI_CTRL_REG_ADDR_WIDTH   (C_S_AXI_CTRL_REG_ADDR_WIDTH   ),

                // Parameters of Axi Master Bus Interface AXI_HOST_MEM ; to Host memory
                .C_M_AXI_HOST_MEM_ID_WIDTH     (C_M_AXI_HOST_MEM_ID_WIDTH     ),
                .C_M_AXI_HOST_MEM_ADDR_WIDTH   (C_M_AXI_HOST_MEM_ADDR_WIDTH   ),
                .C_M_AXI_HOST_MEM_DATA_WIDTH   (C_M_AXI_KERNEL_DATA_WIDTH     ),
                .C_M_AXI_HOST_MEM_AWUSER_WIDTH (C_M_AXI_HOST_MEM_AWUSER_WIDTH ),
                .C_M_AXI_HOST_MEM_ARUSER_WIDTH (C_M_AXI_HOST_MEM_ARUSER_WIDTH ),
                .C_M_AXI_HOST_MEM_WUSER_WIDTH  (C_M_AXI_HOST_MEM_WUSER_WIDTH  ),
                .C_M_AXI_HOST_MEM_RUSER_WIDTH  (C_M_AXI_HOST_MEM_RUSER_WIDTH  ),
                .C_M_AXI_HOST_MEM_BUSER_WIDTH  (C_M_AXI_HOST_MEM_BUSER_WIDTH  ),

                .INPUT_PACKET_STAT_WIDTH       (INPUT_PACKET_STAT_WIDTH       ),
                .INPUT_BATCH_WIDTH             (INPUT_BATCH_WIDTH             ),
                .INPUT_BATCH_PER_PACKET        (INPUT_BATCH_PER_PACKET        ),
                .PIPE_INDATA_WIDTH             (PIPE_INDATA_WIDTH             ),
                .PATTERN_NUM_FL                (PATTERN_NUM_FL                ),
                .PATTERN_NUM_SL                (PATTERN_NUM_SL                ),
                .NUM_OF_PU                     (NUM_OF_PU                     ),
                //.CONFIG_CNT_WIDTH              (CONFIG_CNT_WIDTH              ), // CONFIG_CNT_WIDTH = log2NUM_OF_PU;
                .OUTPUT_STAT_WIDTH             (OUTPUT_STAT_WIDTH             ),
                //.PATTERN_WIDTH                 (PATTERN_WIDTH                 ),
                .PATTERN_ID_WIDTH              (PATTERN_ID_WIDTH              ),
                .MAX_OR_NUM                    (MAX_OR_NUM                    ),
                .MAX_TOKEN_NUM                 (MAX_TOKEN_NUM                 ),
                .MAX_STATE_NUM                 (MAX_STATE_NUM                 ),
                .MAX_TOKEN_LEN                 (MAX_TOKEN_LEN                 ),
                .MAX_CHAR_NUM                  (MAX_CHAR_NUM                  ),
                .NUM_BUFFER_SL                 (NUM_BUFFER_SL                 ),
                .NUM_BUFFER_TL                 (NUM_BUFFER_TL                 ),
                .NUM_BUFFER_4THL               (NUM_BUFFER_4THL               ),
                .NUM_STRING_MATCH_PIPELINE     (NUM_STRING_MATCH_PIPELINE     ),
                .NUM_PIPELINE_IN_A_GROUP       (NUM_PIPELINE_IN_A_GROUP       ),
                .NUM_OF_PIPELINE_GROUP         (NUM_OF_PIPELINE_GROUP         )
            ) regex (
                .clk                    (clk                    ),
                .rst_n                  (rst_n                  ),

                //---- AXI bus interfaced with SNAP core ----
                // AXI write address channel
                .m_axi_snap_awid        (kernel_m_axi_snap_awid[i]        ),
                .m_axi_snap_awaddr      (kernel_m_axi_snap_awaddr[i]      ),
                .m_axi_snap_awlen       (kernel_m_axi_snap_awlen[i]       ),
                .m_axi_snap_awsize      (kernel_m_axi_snap_awsize[i]      ),
                .m_axi_snap_awburst     (kernel_m_axi_snap_awburst[i]     ),
                .m_axi_snap_awcache     (kernel_m_axi_snap_awcache[i]     ),
                .m_axi_snap_awlock      (kernel_m_axi_snap_awlock[i]      ),
                .m_axi_snap_awprot      (kernel_m_axi_snap_awprot[i]      ),
                .m_axi_snap_awqos       (kernel_m_axi_snap_awqos[i]       ),
                .m_axi_snap_awregion    (kernel_m_axi_snap_awregion[i]    ),
                .m_axi_snap_awuser      (kernel_m_axi_snap_awuser[i]      ),
                .m_axi_snap_awvalid     (kernel_m_axi_snap_awvalid[i]     ),
                .m_axi_snap_awready     (kernel_m_axi_snap_awready[i]     ),
                // AXI write data channel
                .m_axi_snap_wid         (kernel_m_axi_snap_wid[i]         ),
                .m_axi_snap_wdata       (kernel_m_axi_snap_wdata[i]       ),
                .m_axi_snap_wstrb       (kernel_m_axi_snap_wstrb[i]       ),
                .m_axi_snap_wlast       (kernel_m_axi_snap_wlast[i]       ),
                .m_axi_snap_wvalid      (kernel_m_axi_snap_wvalid[i]      ),
                .m_axi_snap_wready      (kernel_m_axi_snap_wready[i]      ),
                // AXI write response channel
                .m_axi_snap_bready     (kernel_m_axi_snap_bready[i]     ),
                .m_axi_snap_bid         (kernel_m_axi_snap_bid[i]         ),
                .m_axi_snap_bresp       (kernel_m_axi_snap_bresp[i]       ),
                .m_axi_snap_bvalid      (kernel_m_axi_snap_bvalid[i]      ),
                // AXI read address channel
                .m_axi_snap_arid        (kernel_m_axi_snap_arid[i]        ),
                .m_axi_snap_araddr      (kernel_m_axi_snap_araddr[i]      ),
                .m_axi_snap_arlen       (kernel_m_axi_snap_arlen[i]       ),
                .m_axi_snap_arsize      (kernel_m_axi_snap_arsize[i]      ),
                .m_axi_snap_arburst     (kernel_m_axi_snap_arburst[i]     ),
                .m_axi_snap_aruser      (kernel_m_axi_snap_aruser[i]      ),
                .m_axi_snap_arcache     (kernel_m_axi_snap_arcache[i]     ),
                .m_axi_snap_arlock      (kernel_m_axi_snap_arlock[i]      ),
                .m_axi_snap_arprot      (kernel_m_axi_snap_arprot[i]      ),
                .m_axi_snap_arqos       (kernel_m_axi_snap_arqos[i]       ),
                .m_axi_snap_arregion    (kernel_m_axi_snap_arregion[i]    ),
                .m_axi_snap_arvalid     (kernel_m_axi_snap_arvalid[i]     ),
                .m_axi_snap_arready     (kernel_m_axi_snap_arready[i]     ),
                // AXI  ead data channel
                .m_axi_snap_rready      (kernel_m_axi_snap_rready[i]      ),
                .m_axi_snap_rid         (kernel_m_axi_snap_rid[i]         ),
                .m_axi_snap_rdata       (kernel_m_axi_snap_rdata[i]       ),
                .m_axi_snap_rresp       (kernel_m_axi_snap_rresp[i]       ),
                .m_axi_snap_rlast       (kernel_m_axi_snap_rlast[i]       ),
                .m_axi_snap_rvalid      (kernel_m_axi_snap_rvalid[i]      ),
                //---- AXI bus interfaced with DDR ----
                // AXI write address channel
                .m_axi_ddr_awid        () ,
                .m_axi_ddr_awaddr      () ,
                .m_axi_ddr_awlen       () ,
                .m_axi_ddr_awsize      () ,
                .m_axi_ddr_awburst     () ,
                .m_axi_ddr_awcache     () ,
                .m_axi_ddr_awlock      () ,
                .m_axi_ddr_awprot      () ,
                .m_axi_ddr_awqos       () ,
                .m_axi_ddr_awregion    () ,
                .m_axi_ddr_awuser      () ,
                .m_axi_ddr_awvalid     () ,
                .m_axi_ddr_awready     (0) ,
                // AXI write data channel
                //.m_axi_ddr_wid         (0),
                .m_axi_ddr_wdata       (),
                .m_axi_ddr_wstrb       (),
                .m_axi_ddr_wlast       (),
                .m_axi_ddr_wvalid      (),
                .m_axi_ddr_wready      (0),
                // AXI write response channel
                .m_axi_ddr_bready      (),
                .m_axi_ddr_bid         (0),
                .m_axi_ddr_bresp       (0),
                .m_axi_ddr_bvalid      (0),
                // AXI read address channel
                .m_axi_ddr_arid        (),
                .m_axi_ddr_araddr      (),
                .m_axi_ddr_arlen       (),
                .m_axi_ddr_arsize      (),
                .m_axi_ddr_arburst     (),
                .m_axi_ddr_aruser      (),
                .m_axi_ddr_arcache     (),
                .m_axi_ddr_arlock      (),
                .m_axi_ddr_arprot      (),
                .m_axi_ddr_arqos       (),
                .m_axi_ddr_arregion    (),
                .m_axi_ddr_arvalid     (),
                .m_axi_ddr_arready     (0),
                // AXI  ead data channel
                .m_axi_ddr_rready      (),
                .m_axi_ddr_rid         (0),
                .m_axi_ddr_rdata       (0),
                .m_axi_ddr_rresp       (0),
                .m_axi_ddr_rlast       (0),
                .m_axi_ddr_rvalid      (0),


                //---- AXI Lite bus interfaced with SNAP core ----
                .s_axi_snap_baseaddr      (32'h200 + i*32'h100                ),
                // AXI write address channel
                .s_axi_snap_awready       (kernel_s_axi_snap_awready[i]       ),
                .s_axi_snap_awaddr        (kernel_s_axi_snap_awaddr[i]        ),
                .s_axi_snap_awprot        (kernel_s_axi_snap_awprot[i]        ),
                .s_axi_snap_awvalid       (kernel_s_axi_snap_awvalid[i]       ),
                // axi write data channel
                .s_axi_snap_wready        (kernel_s_axi_snap_wready[i]        ),
                .s_axi_snap_wdata         (kernel_s_axi_snap_wdata[i]         ),
                .s_axi_snap_wstrb         (kernel_s_axi_snap_wstrb[i]         ),
                .s_axi_snap_wvalid        (kernel_s_axi_snap_wvalid[i]        ),
                // AXI response channel
                .s_axi_snap_bresp         (kernel_s_axi_snap_bresp[i]         ),
                .s_axi_snap_bvalid        (kernel_s_axi_snap_bvalid[i]        ),
                .s_axi_snap_bready        (kernel_s_axi_snap_bready[i]        ),
                // AXI read address channel
                .s_axi_snap_arready       (kernel_s_axi_snap_arready[i]       ),
                .s_axi_snap_arvalid       (kernel_s_axi_snap_arvalid[i]       ),
                .s_axi_snap_araddr        (kernel_s_axi_snap_araddr[i]        ),
                .s_axi_snap_arprot        (kernel_s_axi_snap_arprot[i]        ),
                // AXI read data channel
                .s_axi_snap_rdata         (kernel_s_axi_snap_rdata[i]         ),
                .s_axi_snap_rresp         (kernel_s_axi_snap_rresp[i]         ),
                .s_axi_snap_rready        (kernel_s_axi_snap_rready[i]        ),
                .s_axi_snap_rvalid        (kernel_s_axi_snap_rvalid[i]        ),

                // Other signals
                //.i_app_ready              (i_app_ready                        ),
                .i_action_type            (i_action_type                      ),
                .i_action_version         (i_action_version                   )
                //.i_start                  (kernel_i_start[i]                  ),
                //.run_mode                 (run_mode                           ),
                //.system_register          (system_register                    ),
                //.user_register            (user_register                      ),
                //.o_complete               (kernel_o_complete[i]               )
                );
            #endif

            #if defined(VITIS_GQEJOIN_ENABLE)
            gqeJoin_wrapper gqeJoin (
                .stall_start_ext        (        ) , // output wire stall_start_ext
                .stall_done_ext         (        ) , // output wire stall_done_ext
                .stall_start_str        (        ) , // output wire stall_start_str
                .stall_done_str         (        ) , // output wire stall_done_str
                .stall_start_int        (        ) , // output wire stall_start_int
                .stall_done_int         (        ) , // output wire stall_done_int
                .s_axi_control_AWADDR   ( kernel_s_axi_snap_awaddr [i]  ) , // input wire [7 : 0] s_axi_control_AWADDR
                .s_axi_control_AWVALID  ( kernel_s_axi_snap_awvalid[i]  ) , // input wire s_axi_control_AWVALID
                .s_axi_control_AWREADY  ( kernel_s_axi_snap_awready[i]  ) , // output wire s_axi_control_AWREADY
                .s_axi_control_WDATA    ( kernel_s_axi_snap_wdata  [i]  ) , // input wire [31 : 0] s_axi_control_WDATA
                .s_axi_control_WSTRB    ( kernel_s_axi_snap_wstrb  [i]  ) , // input wire [3 : 0] s_axi_control_WSTRB
                .s_axi_control_WVALID   ( kernel_s_axi_snap_wvalid [i]  ) , // input wire s_axi_control_WVALID
                .s_axi_control_WREADY   ( kernel_s_axi_snap_wready [i]  ) , // output wire s_axi_control_WREADY
                .s_axi_control_BRESP    ( kernel_s_axi_snap_bresp  [i]  ) , // output wire [1 : 0] s_axi_control_BRESP
                .s_axi_control_BVALID   ( kernel_s_axi_snap_bvalid [i]  ) , // output wire s_axi_control_BVALID
                .s_axi_control_BREADY   ( kernel_s_axi_snap_bready [i]  ) , // input wire s_axi_control_BREADY
                .s_axi_control_ARADDR   ( kernel_s_axi_snap_araddr [i]  ) , // input wire [7 : 0] s_axi_control_ARADDR
                .s_axi_control_ARVALID  ( kernel_s_axi_snap_arvalid[i]  ) , // input wire s_axi_control_ARVALID
                .s_axi_control_ARREADY  ( kernel_s_axi_snap_arready[i]  ) , // output wire s_axi_control_ARREADY
                .s_axi_control_RDATA    ( kernel_s_axi_snap_rdata  [i]  ) , // output wire [31 : 0] s_axi_control_RDATA
                .s_axi_control_RRESP    ( kernel_s_axi_snap_rresp  [i]  ) , // output wire [1 : 0] s_axi_control_RRESP
                .s_axi_control_RVALID   ( kernel_s_axi_snap_rvalid [i]  ) , // output wire s_axi_control_RVALID
                .s_axi_control_RREADY   ( kernel_s_axi_snap_rready [i]  ) , // input wire s_axi_control_RREADY
                .ap_clk                 ( clk                 ) , // input wire ap_clk
                .ap_rst_n               ( rst_n               ) , // input wire ap_rst_n
                .event_done             (             ) , // output wire event_done
                .interrupt              (               ) , // output wire interrupt
                .event_start            (             ) , // output wire event_start

                //: for (my $i = 0; $i < 4; $i++) {
                //:     my $s = sprintf("%02d", $i);
                //:     print qq(
                //:         .m_axi_gmem0_${i}_AWADDR   ( kernel_m_axi_snap_awaddr  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWLEN    ( kernel_m_axi_snap_awlen   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWSIZE   ( kernel_m_axi_snap_awsize  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWBURST  ( kernel_m_axi_snap_awburst [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWLOCK   ( kernel_m_axi_snap_awlock  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWREGION ( kernel_m_axi_snap_awregion[(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWCACHE  ( kernel_m_axi_snap_awcache [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWPROT   ( kernel_m_axi_snap_awprot  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWQOS    ( kernel_m_axi_snap_awqos   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWVALID  ( kernel_m_axi_snap_awvalid [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_AWREADY  ( kernel_m_axi_snap_awready [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_WDATA    ( kernel_m_axi_snap_wdata   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_WSTRB    ( kernel_m_axi_snap_wstrb   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_WLAST    ( kernel_m_axi_snap_wlast   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_WVALID   ( kernel_m_axi_snap_wvalid  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_WREADY   ( kernel_m_axi_snap_wready  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_BRESP    ( kernel_m_axi_snap_bresp   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_BVALID   ( kernel_m_axi_snap_bvalid  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_BREADY   ( kernel_m_axi_snap_bready  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARADDR   ( kernel_m_axi_snap_araddr  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARLEN    ( kernel_m_axi_snap_arlen   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARSIZE   ( kernel_m_axi_snap_arsize  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARBURST  ( kernel_m_axi_snap_arburst [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARLOCK   ( kernel_m_axi_snap_arlock  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARREGION ( kernel_m_axi_snap_arregion[(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARCACHE  ( kernel_m_axi_snap_arcache [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARPROT   ( kernel_m_axi_snap_arprot  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARQOS    ( kernel_m_axi_snap_arqos   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARVALID  ( kernel_m_axi_snap_arvalid [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_ARREADY  ( kernel_m_axi_snap_arready [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_RDATA    ( kernel_m_axi_snap_rdata   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_RRESP    ( kernel_m_axi_snap_rresp   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_RLAST    ( kernel_m_axi_snap_rlast   [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_RVALID   ( kernel_m_axi_snap_rvalid  [(i*4)+${i}] ) ,
                //:         .m_axi_gmem0_${i}_RREADY   ( kernel_m_axi_snap_rready  [(i*4)+${i}] ) ,
                //:     );
                //: }

                .m_axi_gmem1_0_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_0_AWADDR
                .m_axi_gmem1_0_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_0_AWLEN
                .m_axi_gmem1_0_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_0_AWSIZE
                .m_axi_gmem1_0_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_0_AWBURST
                .m_axi_gmem1_0_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_0_AWLOCK
                .m_axi_gmem1_0_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_0_AWREGION
                .m_axi_gmem1_0_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_0_AWCACHE
                .m_axi_gmem1_0_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_0_AWPROT
                .m_axi_gmem1_0_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_0_AWQOS
                .m_axi_gmem1_0_AWVALID  ( ) , // output wire m_axi_gmem1_0_AWVALID
                .m_axi_gmem1_0_AWREADY  ( ) , // input wire m_axi_gmem1_0_AWREADY
                .m_axi_gmem1_0_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_0_WDATA
                .m_axi_gmem1_0_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_0_WSTRB
                .m_axi_gmem1_0_WLAST    ( ) , // output wire m_axi_gmem1_0_WLAST
                .m_axi_gmem1_0_WVALID   ( ) , // output wire m_axi_gmem1_0_WVALID
                .m_axi_gmem1_0_WREADY   ( ) , // input wire m_axi_gmem1_0_WREADY
                .m_axi_gmem1_0_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_0_BRESP
                .m_axi_gmem1_0_BVALID   ( ) , // input wire m_axi_gmem1_0_BVALID
                .m_axi_gmem1_0_BREADY   ( ) , // output wire m_axi_gmem1_0_BREADY
                .m_axi_gmem1_0_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_0_ARADDR
                .m_axi_gmem1_0_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_0_ARLEN
                .m_axi_gmem1_0_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_0_ARSIZE
                .m_axi_gmem1_0_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_0_ARBURST
                .m_axi_gmem1_0_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_0_ARLOCK
                .m_axi_gmem1_0_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_0_ARREGION
                .m_axi_gmem1_0_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_0_ARCACHE
                .m_axi_gmem1_0_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_0_ARPROT
                .m_axi_gmem1_0_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_0_ARQOS
                .m_axi_gmem1_0_ARVALID  ( ) , // output wire m_axi_gmem1_0_ARVALID
                .m_axi_gmem1_0_ARREADY  ( ) , // input wire m_axi_gmem1_0_ARREADY
                .m_axi_gmem1_0_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_0_RDATA
                .m_axi_gmem1_0_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_0_RRESP
                .m_axi_gmem1_0_RLAST    ( ) , // input wire m_axi_gmem1_0_RLAST
                .m_axi_gmem1_0_RVALID   ( ) , // input wire m_axi_gmem1_0_RVALID
                .m_axi_gmem1_0_RREADY   ( ) , // output wire m_axi_gmem1_0_RREADY
                .m_axi_gmem1_1_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_1_AWADDR
                .m_axi_gmem1_1_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_1_AWLEN
                .m_axi_gmem1_1_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_1_AWSIZE
                .m_axi_gmem1_1_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_1_AWBURST
                .m_axi_gmem1_1_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_1_AWLOCK
                .m_axi_gmem1_1_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_1_AWREGION
                .m_axi_gmem1_1_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_1_AWCACHE
                .m_axi_gmem1_1_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_1_AWPROT
                .m_axi_gmem1_1_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_1_AWQOS
                .m_axi_gmem1_1_AWVALID  ( ) , // output wire m_axi_gmem1_1_AWVALID
                .m_axi_gmem1_1_AWREADY  ( ) , // input wire m_axi_gmem1_1_AWREADY
                .m_axi_gmem1_1_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_1_WDATA
                .m_axi_gmem1_1_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_1_WSTRB
                .m_axi_gmem1_1_WLAST    ( ) , // output wire m_axi_gmem1_1_WLAST
                .m_axi_gmem1_1_WVALID   ( ) , // output wire m_axi_gmem1_1_WVALID
                .m_axi_gmem1_1_WREADY   ( ) , // input wire m_axi_gmem1_1_WREADY
                .m_axi_gmem1_1_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_1_BRESP
                .m_axi_gmem1_1_BVALID   ( ) , // input wire m_axi_gmem1_1_BVALID
                .m_axi_gmem1_1_BREADY   ( ) , // output wire m_axi_gmem1_1_BREADY
                .m_axi_gmem1_1_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_1_ARADDR
                .m_axi_gmem1_1_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_1_ARLEN
                .m_axi_gmem1_1_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_1_ARSIZE
                .m_axi_gmem1_1_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_1_ARBURST
                .m_axi_gmem1_1_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_1_ARLOCK
                .m_axi_gmem1_1_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_1_ARREGION
                .m_axi_gmem1_1_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_1_ARCACHE
                .m_axi_gmem1_1_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_1_ARPROT
                .m_axi_gmem1_1_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_1_ARQOS
                .m_axi_gmem1_1_ARVALID  ( ) , // output wire m_axi_gmem1_1_ARVALID
                .m_axi_gmem1_1_ARREADY  ( ) , // input wire m_axi_gmem1_1_ARREADY
                .m_axi_gmem1_1_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_1_RDATA
                .m_axi_gmem1_1_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_1_RRESP
                .m_axi_gmem1_1_RLAST    ( ) , // input wire m_axi_gmem1_1_RLAST
                .m_axi_gmem1_1_RVALID   ( ) , // input wire m_axi_gmem1_1_RVALID
                .m_axi_gmem1_1_RREADY   ( ) , // output wire m_axi_gmem1_1_RREADY
                .m_axi_gmem1_2_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_2_AWADDR
                .m_axi_gmem1_2_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_2_AWLEN
                .m_axi_gmem1_2_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_2_AWSIZE
                .m_axi_gmem1_2_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_2_AWBURST
                .m_axi_gmem1_2_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_2_AWLOCK
                .m_axi_gmem1_2_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_2_AWREGION
                .m_axi_gmem1_2_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_2_AWCACHE
                .m_axi_gmem1_2_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_2_AWPROT
                .m_axi_gmem1_2_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_2_AWQOS
                .m_axi_gmem1_2_AWVALID  ( ) , // output wire m_axi_gmem1_2_AWVALID
                .m_axi_gmem1_2_AWREADY  ( ) , // input wire m_axi_gmem1_2_AWREADY
                .m_axi_gmem1_2_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_2_WDATA
                .m_axi_gmem1_2_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_2_WSTRB
                .m_axi_gmem1_2_WLAST    ( ) , // output wire m_axi_gmem1_2_WLAST
                .m_axi_gmem1_2_WVALID   ( ) , // output wire m_axi_gmem1_2_WVALID
                .m_axi_gmem1_2_WREADY   ( ) , // input wire m_axi_gmem1_2_WREADY
                .m_axi_gmem1_2_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_2_BRESP
                .m_axi_gmem1_2_BVALID   ( ) , // input wire m_axi_gmem1_2_BVALID
                .m_axi_gmem1_2_BREADY   ( ) , // output wire m_axi_gmem1_2_BREADY
                .m_axi_gmem1_2_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_2_ARADDR
                .m_axi_gmem1_2_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_2_ARLEN
                .m_axi_gmem1_2_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_2_ARSIZE
                .m_axi_gmem1_2_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_2_ARBURST
                .m_axi_gmem1_2_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_2_ARLOCK
                .m_axi_gmem1_2_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_2_ARREGION
                .m_axi_gmem1_2_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_2_ARCACHE
                .m_axi_gmem1_2_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_2_ARPROT
                .m_axi_gmem1_2_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_2_ARQOS
                .m_axi_gmem1_2_ARVALID  ( ) , // output wire m_axi_gmem1_2_ARVALID
                .m_axi_gmem1_2_ARREADY  ( ) , // input wire m_axi_gmem1_2_ARREADY
                .m_axi_gmem1_2_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_2_RDATA
                .m_axi_gmem1_2_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_2_RRESP
                .m_axi_gmem1_2_RLAST    ( ) , // input wire m_axi_gmem1_2_RLAST
                .m_axi_gmem1_2_RVALID   ( ) , // input wire m_axi_gmem1_2_RVALID
                .m_axi_gmem1_2_RREADY   ( ) , // output wire m_axi_gmem1_2_RREADY
                .m_axi_gmem1_3_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_3_AWADDR
                .m_axi_gmem1_3_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_3_AWLEN
                .m_axi_gmem1_3_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_3_AWSIZE
                .m_axi_gmem1_3_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_3_AWBURST
                .m_axi_gmem1_3_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_3_AWLOCK
                .m_axi_gmem1_3_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_3_AWREGION
                .m_axi_gmem1_3_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_3_AWCACHE
                .m_axi_gmem1_3_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_3_AWPROT
                .m_axi_gmem1_3_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_3_AWQOS
                .m_axi_gmem1_3_AWVALID  ( ) , // output wire m_axi_gmem1_3_AWVALID
                .m_axi_gmem1_3_AWREADY  ( ) , // input wire m_axi_gmem1_3_AWREADY
                .m_axi_gmem1_3_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_3_WDATA
                .m_axi_gmem1_3_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_3_WSTRB
                .m_axi_gmem1_3_WLAST    ( ) , // output wire m_axi_gmem1_3_WLAST
                .m_axi_gmem1_3_WVALID   ( ) , // output wire m_axi_gmem1_3_WVALID
                .m_axi_gmem1_3_WREADY   ( ) , // input wire m_axi_gmem1_3_WREADY
                .m_axi_gmem1_3_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_3_BRESP
                .m_axi_gmem1_3_BVALID   ( ) , // input wire m_axi_gmem1_3_BVALID
                .m_axi_gmem1_3_BREADY   ( ) , // output wire m_axi_gmem1_3_BREADY
                .m_axi_gmem1_3_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_3_ARADDR
                .m_axi_gmem1_3_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_3_ARLEN
                .m_axi_gmem1_3_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_3_ARSIZE
                .m_axi_gmem1_3_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_3_ARBURST
                .m_axi_gmem1_3_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_3_ARLOCK
                .m_axi_gmem1_3_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_3_ARREGION
                .m_axi_gmem1_3_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_3_ARCACHE
                .m_axi_gmem1_3_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_3_ARPROT
                .m_axi_gmem1_3_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_3_ARQOS
                .m_axi_gmem1_3_ARVALID  ( ) , // output wire m_axi_gmem1_3_ARVALID
                .m_axi_gmem1_3_ARREADY  ( ) , // input wire m_axi_gmem1_3_ARREADY
                .m_axi_gmem1_3_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_3_RDATA
                .m_axi_gmem1_3_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_3_RRESP
                .m_axi_gmem1_3_RLAST    ( ) , // input wire m_axi_gmem1_3_RLAST
                .m_axi_gmem1_3_RVALID   ( ) , // input wire m_axi_gmem1_3_RVALID
                .m_axi_gmem1_3_RREADY   ( ) , // output wire m_axi_gmem1_3_RREADY
                .m_axi_gmem1_4_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_4_AWADDR
                .m_axi_gmem1_4_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_4_AWLEN
                .m_axi_gmem1_4_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_4_AWSIZE
                .m_axi_gmem1_4_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_4_AWBURST
                .m_axi_gmem1_4_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_4_AWLOCK
                .m_axi_gmem1_4_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_4_AWREGION
                .m_axi_gmem1_4_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_4_AWCACHE
                .m_axi_gmem1_4_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_4_AWPROT
                .m_axi_gmem1_4_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_4_AWQOS
                .m_axi_gmem1_4_AWVALID  ( ) , // output wire m_axi_gmem1_4_AWVALID
                .m_axi_gmem1_4_AWREADY  ( ) , // input wire m_axi_gmem1_4_AWREADY
                .m_axi_gmem1_4_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_4_WDATA
                .m_axi_gmem1_4_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_4_WSTRB
                .m_axi_gmem1_4_WLAST    ( ) , // output wire m_axi_gmem1_4_WLAST
                .m_axi_gmem1_4_WVALID   ( ) , // output wire m_axi_gmem1_4_WVALID
                .m_axi_gmem1_4_WREADY   ( ) , // input wire m_axi_gmem1_4_WREADY
                .m_axi_gmem1_4_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_4_BRESP
                .m_axi_gmem1_4_BVALID   ( ) , // input wire m_axi_gmem1_4_BVALID
                .m_axi_gmem1_4_BREADY   ( ) , // output wire m_axi_gmem1_4_BREADY
                .m_axi_gmem1_4_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_4_ARADDR
                .m_axi_gmem1_4_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_4_ARLEN
                .m_axi_gmem1_4_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_4_ARSIZE
                .m_axi_gmem1_4_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_4_ARBURST
                .m_axi_gmem1_4_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_4_ARLOCK
                .m_axi_gmem1_4_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_4_ARREGION
                .m_axi_gmem1_4_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_4_ARCACHE
                .m_axi_gmem1_4_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_4_ARPROT
                .m_axi_gmem1_4_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_4_ARQOS
                .m_axi_gmem1_4_ARVALID  ( ) , // output wire m_axi_gmem1_4_ARVALID
                .m_axi_gmem1_4_ARREADY  ( ) , // input wire m_axi_gmem1_4_ARREADY
                .m_axi_gmem1_4_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_4_RDATA
                .m_axi_gmem1_4_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_4_RRESP
                .m_axi_gmem1_4_RLAST    ( ) , // input wire m_axi_gmem1_4_RLAST
                .m_axi_gmem1_4_RVALID   ( ) , // input wire m_axi_gmem1_4_RVALID
                .m_axi_gmem1_4_RREADY   ( ) , // output wire m_axi_gmem1_4_RREADY
                .m_axi_gmem1_5_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_5_AWADDR
                .m_axi_gmem1_5_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_5_AWLEN
                .m_axi_gmem1_5_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_5_AWSIZE
                .m_axi_gmem1_5_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_5_AWBURST
                .m_axi_gmem1_5_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_5_AWLOCK
                .m_axi_gmem1_5_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_5_AWREGION
                .m_axi_gmem1_5_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_5_AWCACHE
                .m_axi_gmem1_5_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_5_AWPROT
                .m_axi_gmem1_5_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_5_AWQOS
                .m_axi_gmem1_5_AWVALID  ( ) , // output wire m_axi_gmem1_5_AWVALID
                .m_axi_gmem1_5_AWREADY  ( ) , // input wire m_axi_gmem1_5_AWREADY
                .m_axi_gmem1_5_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_5_WDATA
                .m_axi_gmem1_5_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_5_WSTRB
                .m_axi_gmem1_5_WLAST    ( ) , // output wire m_axi_gmem1_5_WLAST
                .m_axi_gmem1_5_WVALID   ( ) , // output wire m_axi_gmem1_5_WVALID
                .m_axi_gmem1_5_WREADY   ( ) , // input wire m_axi_gmem1_5_WREADY
                .m_axi_gmem1_5_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_5_BRESP
                .m_axi_gmem1_5_BVALID   ( ) , // input wire m_axi_gmem1_5_BVALID
                .m_axi_gmem1_5_BREADY   ( ) , // output wire m_axi_gmem1_5_BREADY
                .m_axi_gmem1_5_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_5_ARADDR
                .m_axi_gmem1_5_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_5_ARLEN
                .m_axi_gmem1_5_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_5_ARSIZE
                .m_axi_gmem1_5_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_5_ARBURST
                .m_axi_gmem1_5_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_5_ARLOCK
                .m_axi_gmem1_5_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_5_ARREGION
                .m_axi_gmem1_5_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_5_ARCACHE
                .m_axi_gmem1_5_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_5_ARPROT
                .m_axi_gmem1_5_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_5_ARQOS
                .m_axi_gmem1_5_ARVALID  ( ) , // output wire m_axi_gmem1_5_ARVALID
                .m_axi_gmem1_5_ARREADY  ( ) , // input wire m_axi_gmem1_5_ARREADY
                .m_axi_gmem1_5_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_5_RDATA
                .m_axi_gmem1_5_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_5_RRESP
                .m_axi_gmem1_5_RLAST    ( ) , // input wire m_axi_gmem1_5_RLAST
                .m_axi_gmem1_5_RVALID   ( ) , // input wire m_axi_gmem1_5_RVALID
                .m_axi_gmem1_5_RREADY   ( ) , // output wire m_axi_gmem1_5_RREADY
                .m_axi_gmem1_6_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_6_AWADDR
                .m_axi_gmem1_6_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_6_AWLEN
                .m_axi_gmem1_6_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_6_AWSIZE
                .m_axi_gmem1_6_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_6_AWBURST
                .m_axi_gmem1_6_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_6_AWLOCK
                .m_axi_gmem1_6_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_6_AWREGION
                .m_axi_gmem1_6_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_6_AWCACHE
                .m_axi_gmem1_6_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_6_AWPROT
                .m_axi_gmem1_6_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_6_AWQOS
                .m_axi_gmem1_6_AWVALID  ( ) , // output wire m_axi_gmem1_6_AWVALID
                .m_axi_gmem1_6_AWREADY  ( ) , // input wire m_axi_gmem1_6_AWREADY
                .m_axi_gmem1_6_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_6_WDATA
                .m_axi_gmem1_6_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_6_WSTRB
                .m_axi_gmem1_6_WLAST    ( ) , // output wire m_axi_gmem1_6_WLAST
                .m_axi_gmem1_6_WVALID   ( ) , // output wire m_axi_gmem1_6_WVALID
                .m_axi_gmem1_6_WREADY   ( ) , // input wire m_axi_gmem1_6_WREADY
                .m_axi_gmem1_6_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_6_BRESP
                .m_axi_gmem1_6_BVALID   ( ) , // input wire m_axi_gmem1_6_BVALID
                .m_axi_gmem1_6_BREADY   ( ) , // output wire m_axi_gmem1_6_BREADY
                .m_axi_gmem1_6_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_6_ARADDR
                .m_axi_gmem1_6_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_6_ARLEN
                .m_axi_gmem1_6_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_6_ARSIZE
                .m_axi_gmem1_6_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_6_ARBURST
                .m_axi_gmem1_6_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_6_ARLOCK
                .m_axi_gmem1_6_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_6_ARREGION
                .m_axi_gmem1_6_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_6_ARCACHE
                .m_axi_gmem1_6_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_6_ARPROT
                .m_axi_gmem1_6_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_6_ARQOS
                .m_axi_gmem1_6_ARVALID  ( ) , // output wire m_axi_gmem1_6_ARVALID
                .m_axi_gmem1_6_ARREADY  ( ) , // input wire m_axi_gmem1_6_ARREADY
                .m_axi_gmem1_6_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_6_RDATA
                .m_axi_gmem1_6_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_6_RRESP
                .m_axi_gmem1_6_RLAST    ( ) , // input wire m_axi_gmem1_6_RLAST
                .m_axi_gmem1_6_RVALID   ( ) , // input wire m_axi_gmem1_6_RVALID
                .m_axi_gmem1_6_RREADY   ( ) , // output wire m_axi_gmem1_6_RREADY
                .m_axi_gmem1_7_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_7_AWADDR
                .m_axi_gmem1_7_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_7_AWLEN
                .m_axi_gmem1_7_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_7_AWSIZE
                .m_axi_gmem1_7_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_7_AWBURST
                .m_axi_gmem1_7_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_7_AWLOCK
                .m_axi_gmem1_7_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem1_7_AWREGION
                .m_axi_gmem1_7_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_7_AWCACHE
                .m_axi_gmem1_7_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_7_AWPROT
                .m_axi_gmem1_7_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_7_AWQOS
                .m_axi_gmem1_7_AWVALID  ( ) , // output wire m_axi_gmem1_7_AWVALID
                .m_axi_gmem1_7_AWREADY  ( ) , // input wire m_axi_gmem1_7_AWREADY
                .m_axi_gmem1_7_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem1_7_WDATA
                .m_axi_gmem1_7_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem1_7_WSTRB
                .m_axi_gmem1_7_WLAST    ( ) , // output wire m_axi_gmem1_7_WLAST
                .m_axi_gmem1_7_WVALID   ( ) , // output wire m_axi_gmem1_7_WVALID
                .m_axi_gmem1_7_WREADY   ( ) , // input wire m_axi_gmem1_7_WREADY
                .m_axi_gmem1_7_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_7_BRESP
                .m_axi_gmem1_7_BVALID   ( ) , // input wire m_axi_gmem1_7_BVALID
                .m_axi_gmem1_7_BREADY   ( ) , // output wire m_axi_gmem1_7_BREADY
                .m_axi_gmem1_7_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem1_7_ARADDR
                .m_axi_gmem1_7_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem1_7_ARLEN
                .m_axi_gmem1_7_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem1_7_ARSIZE
                .m_axi_gmem1_7_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem1_7_ARBURST
                .m_axi_gmem1_7_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem1_7_ARLOCK
                .m_axi_gmem1_7_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem1_7_ARREGION
                .m_axi_gmem1_7_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem1_7_ARCACHE
                .m_axi_gmem1_7_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem1_7_ARPROT
                .m_axi_gmem1_7_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem1_7_ARQOS
                .m_axi_gmem1_7_ARVALID  ( ) , // output wire m_axi_gmem1_7_ARVALID
                .m_axi_gmem1_7_ARREADY  ( ) , // input wire m_axi_gmem1_7_ARREADY
                .m_axi_gmem1_7_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem1_7_RDATA
                .m_axi_gmem1_7_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem1_7_RRESP
                .m_axi_gmem1_7_RLAST    ( ) , // input wire m_axi_gmem1_7_RLAST
                .m_axi_gmem1_7_RVALID   ( ) , // input wire m_axi_gmem1_7_RVALID
                .m_axi_gmem1_7_RREADY   ( ) , // output wire m_axi_gmem1_7_RREADY
                .m_axi_gmem2_0_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_0_AWADDR
                .m_axi_gmem2_0_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_0_AWLEN
                .m_axi_gmem2_0_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_0_AWSIZE
                .m_axi_gmem2_0_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_0_AWBURST
                .m_axi_gmem2_0_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_0_AWLOCK
                .m_axi_gmem2_0_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_0_AWREGION
                .m_axi_gmem2_0_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_0_AWCACHE
                .m_axi_gmem2_0_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_0_AWPROT
                .m_axi_gmem2_0_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_0_AWQOS
                .m_axi_gmem2_0_AWVALID  ( ) , // output wire m_axi_gmem2_0_AWVALID
                .m_axi_gmem2_0_AWREADY  ( ) , // input wire m_axi_gmem2_0_AWREADY
                .m_axi_gmem2_0_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_0_WDATA
                .m_axi_gmem2_0_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_0_WSTRB
                .m_axi_gmem2_0_WLAST    ( ) , // output wire m_axi_gmem2_0_WLAST
                .m_axi_gmem2_0_WVALID   ( ) , // output wire m_axi_gmem2_0_WVALID
                .m_axi_gmem2_0_WREADY   ( ) , // input wire m_axi_gmem2_0_WREADY
                .m_axi_gmem2_0_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_0_BRESP
                .m_axi_gmem2_0_BVALID   ( ) , // input wire m_axi_gmem2_0_BVALID
                .m_axi_gmem2_0_BREADY   ( ) , // output wire m_axi_gmem2_0_BREADY
                .m_axi_gmem2_0_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_0_ARADDR
                .m_axi_gmem2_0_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_0_ARLEN
                .m_axi_gmem2_0_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_0_ARSIZE
                .m_axi_gmem2_0_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_0_ARBURST
                .m_axi_gmem2_0_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_0_ARLOCK
                .m_axi_gmem2_0_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_0_ARREGION
                .m_axi_gmem2_0_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_0_ARCACHE
                .m_axi_gmem2_0_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_0_ARPROT
                .m_axi_gmem2_0_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_0_ARQOS
                .m_axi_gmem2_0_ARVALID  ( ) , // output wire m_axi_gmem2_0_ARVALID
                .m_axi_gmem2_0_ARREADY  ( ) , // input wire m_axi_gmem2_0_ARREADY
                .m_axi_gmem2_0_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_0_RDATA
                .m_axi_gmem2_0_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_0_RRESP
                .m_axi_gmem2_0_RLAST    ( ) , // input wire m_axi_gmem2_0_RLAST
                .m_axi_gmem2_0_RVALID   ( ) , // input wire m_axi_gmem2_0_RVALID
                .m_axi_gmem2_0_RREADY   ( ) , // output wire m_axi_gmem2_0_RREADY
                .m_axi_gmem2_1_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_1_AWADDR
                .m_axi_gmem2_1_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_1_AWLEN
                .m_axi_gmem2_1_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_1_AWSIZE
                .m_axi_gmem2_1_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_1_AWBURST
                .m_axi_gmem2_1_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_1_AWLOCK
                .m_axi_gmem2_1_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_1_AWREGION
                .m_axi_gmem2_1_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_1_AWCACHE
                .m_axi_gmem2_1_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_1_AWPROT
                .m_axi_gmem2_1_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_1_AWQOS
                .m_axi_gmem2_1_AWVALID  ( ) , // output wire m_axi_gmem2_1_AWVALID
                .m_axi_gmem2_1_AWREADY  ( ) , // input wire m_axi_gmem2_1_AWREADY
                .m_axi_gmem2_1_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_1_WDATA
                .m_axi_gmem2_1_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_1_WSTRB
                .m_axi_gmem2_1_WLAST    ( ) , // output wire m_axi_gmem2_1_WLAST
                .m_axi_gmem2_1_WVALID   ( ) , // output wire m_axi_gmem2_1_WVALID
                .m_axi_gmem2_1_WREADY   ( ) , // input wire m_axi_gmem2_1_WREADY
                .m_axi_gmem2_1_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_1_BRESP
                .m_axi_gmem2_1_BVALID   ( ) , // input wire m_axi_gmem2_1_BVALID
                .m_axi_gmem2_1_BREADY   ( ) , // output wire m_axi_gmem2_1_BREADY
                .m_axi_gmem2_1_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_1_ARADDR
                .m_axi_gmem2_1_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_1_ARLEN
                .m_axi_gmem2_1_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_1_ARSIZE
                .m_axi_gmem2_1_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_1_ARBURST
                .m_axi_gmem2_1_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_1_ARLOCK
                .m_axi_gmem2_1_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_1_ARREGION
                .m_axi_gmem2_1_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_1_ARCACHE
                .m_axi_gmem2_1_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_1_ARPROT
                .m_axi_gmem2_1_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_1_ARQOS
                .m_axi_gmem2_1_ARVALID  ( ) , // output wire m_axi_gmem2_1_ARVALID
                .m_axi_gmem2_1_ARREADY  ( ) , // input wire m_axi_gmem2_1_ARREADY
                .m_axi_gmem2_1_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_1_RDATA
                .m_axi_gmem2_1_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_1_RRESP
                .m_axi_gmem2_1_RLAST    ( ) , // input wire m_axi_gmem2_1_RLAST
                .m_axi_gmem2_1_RVALID   ( ) , // input wire m_axi_gmem2_1_RVALID
                .m_axi_gmem2_1_RREADY   ( ) , // output wire m_axi_gmem2_1_RREADY
                .m_axi_gmem2_2_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_2_AWADDR
                .m_axi_gmem2_2_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_2_AWLEN
                .m_axi_gmem2_2_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_2_AWSIZE
                .m_axi_gmem2_2_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_2_AWBURST
                .m_axi_gmem2_2_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_2_AWLOCK
                .m_axi_gmem2_2_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_2_AWREGION
                .m_axi_gmem2_2_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_2_AWCACHE
                .m_axi_gmem2_2_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_2_AWPROT
                .m_axi_gmem2_2_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_2_AWQOS
                .m_axi_gmem2_2_AWVALID  ( ) , // output wire m_axi_gmem2_2_AWVALID
                .m_axi_gmem2_2_AWREADY  ( ) , // input wire m_axi_gmem2_2_AWREADY
                .m_axi_gmem2_2_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_2_WDATA
                .m_axi_gmem2_2_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_2_WSTRB
                .m_axi_gmem2_2_WLAST    ( ) , // output wire m_axi_gmem2_2_WLAST
                .m_axi_gmem2_2_WVALID   ( ) , // output wire m_axi_gmem2_2_WVALID
                .m_axi_gmem2_2_WREADY   ( ) , // input wire m_axi_gmem2_2_WREADY
                .m_axi_gmem2_2_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_2_BRESP
                .m_axi_gmem2_2_BVALID   ( ) , // input wire m_axi_gmem2_2_BVALID
                .m_axi_gmem2_2_BREADY   ( ) , // output wire m_axi_gmem2_2_BREADY
                .m_axi_gmem2_2_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_2_ARADDR
                .m_axi_gmem2_2_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_2_ARLEN
                .m_axi_gmem2_2_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_2_ARSIZE
                .m_axi_gmem2_2_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_2_ARBURST
                .m_axi_gmem2_2_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_2_ARLOCK
                .m_axi_gmem2_2_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_2_ARREGION
                .m_axi_gmem2_2_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_2_ARCACHE
                .m_axi_gmem2_2_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_2_ARPROT
                .m_axi_gmem2_2_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_2_ARQOS
                .m_axi_gmem2_2_ARVALID  ( ) , // output wire m_axi_gmem2_2_ARVALID
                .m_axi_gmem2_2_ARREADY  ( ) , // input wire m_axi_gmem2_2_ARREADY
                .m_axi_gmem2_2_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_2_RDATA
                .m_axi_gmem2_2_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_2_RRESP
                .m_axi_gmem2_2_RLAST    ( ) , // input wire m_axi_gmem2_2_RLAST
                .m_axi_gmem2_2_RVALID   ( ) , // input wire m_axi_gmem2_2_RVALID
                .m_axi_gmem2_2_RREADY   ( ) , // output wire m_axi_gmem2_2_RREADY
                .m_axi_gmem2_3_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_3_AWADDR
                .m_axi_gmem2_3_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_3_AWLEN
                .m_axi_gmem2_3_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_3_AWSIZE
                .m_axi_gmem2_3_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_3_AWBURST
                .m_axi_gmem2_3_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_3_AWLOCK
                .m_axi_gmem2_3_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_3_AWREGION
                .m_axi_gmem2_3_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_3_AWCACHE
                .m_axi_gmem2_3_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_3_AWPROT
                .m_axi_gmem2_3_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_3_AWQOS
                .m_axi_gmem2_3_AWVALID  ( ) , // output wire m_axi_gmem2_3_AWVALID
                .m_axi_gmem2_3_AWREADY  ( ) , // input wire m_axi_gmem2_3_AWREADY
                .m_axi_gmem2_3_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_3_WDATA
                .m_axi_gmem2_3_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_3_WSTRB
                .m_axi_gmem2_3_WLAST    ( ) , // output wire m_axi_gmem2_3_WLAST
                .m_axi_gmem2_3_WVALID   ( ) , // output wire m_axi_gmem2_3_WVALID
                .m_axi_gmem2_3_WREADY   ( ) , // input wire m_axi_gmem2_3_WREADY
                .m_axi_gmem2_3_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_3_BRESP
                .m_axi_gmem2_3_BVALID   ( ) , // input wire m_axi_gmem2_3_BVALID
                .m_axi_gmem2_3_BREADY   ( ) , // output wire m_axi_gmem2_3_BREADY
                .m_axi_gmem2_3_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_3_ARADDR
                .m_axi_gmem2_3_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_3_ARLEN
                .m_axi_gmem2_3_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_3_ARSIZE
                .m_axi_gmem2_3_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_3_ARBURST
                .m_axi_gmem2_3_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_3_ARLOCK
                .m_axi_gmem2_3_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_3_ARREGION
                .m_axi_gmem2_3_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_3_ARCACHE
                .m_axi_gmem2_3_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_3_ARPROT
                .m_axi_gmem2_3_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_3_ARQOS
                .m_axi_gmem2_3_ARVALID  ( ) , // output wire m_axi_gmem2_3_ARVALID
                .m_axi_gmem2_3_ARREADY  ( ) , // input wire m_axi_gmem2_3_ARREADY
                .m_axi_gmem2_3_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_3_RDATA
                .m_axi_gmem2_3_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_3_RRESP
                .m_axi_gmem2_3_RLAST    ( ) , // input wire m_axi_gmem2_3_RLAST
                .m_axi_gmem2_3_RVALID   ( ) , // input wire m_axi_gmem2_3_RVALID
                .m_axi_gmem2_3_RREADY   ( ) , // output wire m_axi_gmem2_3_RREADY
                .m_axi_gmem2_4_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_4_AWADDR
                .m_axi_gmem2_4_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_4_AWLEN
                .m_axi_gmem2_4_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_4_AWSIZE
                .m_axi_gmem2_4_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_4_AWBURST
                .m_axi_gmem2_4_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_4_AWLOCK
                .m_axi_gmem2_4_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_4_AWREGION
                .m_axi_gmem2_4_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_4_AWCACHE
                .m_axi_gmem2_4_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_4_AWPROT
                .m_axi_gmem2_4_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_4_AWQOS
                .m_axi_gmem2_4_AWVALID  ( ) , // output wire m_axi_gmem2_4_AWVALID
                .m_axi_gmem2_4_AWREADY  ( ) , // input wire m_axi_gmem2_4_AWREADY
                .m_axi_gmem2_4_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_4_WDATA
                .m_axi_gmem2_4_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_4_WSTRB
                .m_axi_gmem2_4_WLAST    ( ) , // output wire m_axi_gmem2_4_WLAST
                .m_axi_gmem2_4_WVALID   ( ) , // output wire m_axi_gmem2_4_WVALID
                .m_axi_gmem2_4_WREADY   ( ) , // input wire m_axi_gmem2_4_WREADY
                .m_axi_gmem2_4_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_4_BRESP
                .m_axi_gmem2_4_BVALID   ( ) , // input wire m_axi_gmem2_4_BVALID
                .m_axi_gmem2_4_BREADY   ( ) , // output wire m_axi_gmem2_4_BREADY
                .m_axi_gmem2_4_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_4_ARADDR
                .m_axi_gmem2_4_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_4_ARLEN
                .m_axi_gmem2_4_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_4_ARSIZE
                .m_axi_gmem2_4_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_4_ARBURST
                .m_axi_gmem2_4_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_4_ARLOCK
                .m_axi_gmem2_4_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_4_ARREGION
                .m_axi_gmem2_4_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_4_ARCACHE
                .m_axi_gmem2_4_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_4_ARPROT
                .m_axi_gmem2_4_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_4_ARQOS
                .m_axi_gmem2_4_ARVALID  ( ) , // output wire m_axi_gmem2_4_ARVALID
                .m_axi_gmem2_4_ARREADY  ( ) , // input wire m_axi_gmem2_4_ARREADY
                .m_axi_gmem2_4_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_4_RDATA
                .m_axi_gmem2_4_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_4_RRESP
                .m_axi_gmem2_4_RLAST    ( ) , // input wire m_axi_gmem2_4_RLAST
                .m_axi_gmem2_4_RVALID   ( ) , // input wire m_axi_gmem2_4_RVALID
                .m_axi_gmem2_4_RREADY   ( ) , // output wire m_axi_gmem2_4_RREADY
                .m_axi_gmem2_5_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_5_AWADDR
                .m_axi_gmem2_5_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_5_AWLEN
                .m_axi_gmem2_5_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_5_AWSIZE
                .m_axi_gmem2_5_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_5_AWBURST
                .m_axi_gmem2_5_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_5_AWLOCK
                .m_axi_gmem2_5_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_5_AWREGION
                .m_axi_gmem2_5_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_5_AWCACHE
                .m_axi_gmem2_5_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_5_AWPROT
                .m_axi_gmem2_5_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_5_AWQOS
                .m_axi_gmem2_5_AWVALID  ( ) , // output wire m_axi_gmem2_5_AWVALID
                .m_axi_gmem2_5_AWREADY  ( ) , // input wire m_axi_gmem2_5_AWREADY
                .m_axi_gmem2_5_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_5_WDATA
                .m_axi_gmem2_5_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_5_WSTRB
                .m_axi_gmem2_5_WLAST    ( ) , // output wire m_axi_gmem2_5_WLAST
                .m_axi_gmem2_5_WVALID   ( ) , // output wire m_axi_gmem2_5_WVALID
                .m_axi_gmem2_5_WREADY   ( ) , // input wire m_axi_gmem2_5_WREADY
                .m_axi_gmem2_5_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_5_BRESP
                .m_axi_gmem2_5_BVALID   ( ) , // input wire m_axi_gmem2_5_BVALID
                .m_axi_gmem2_5_BREADY   ( ) , // output wire m_axi_gmem2_5_BREADY
                .m_axi_gmem2_5_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_5_ARADDR
                .m_axi_gmem2_5_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_5_ARLEN
                .m_axi_gmem2_5_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_5_ARSIZE
                .m_axi_gmem2_5_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_5_ARBURST
                .m_axi_gmem2_5_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_5_ARLOCK
                .m_axi_gmem2_5_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_5_ARREGION
                .m_axi_gmem2_5_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_5_ARCACHE
                .m_axi_gmem2_5_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_5_ARPROT
                .m_axi_gmem2_5_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_5_ARQOS
                .m_axi_gmem2_5_ARVALID  ( ) , // output wire m_axi_gmem2_5_ARVALID
                .m_axi_gmem2_5_ARREADY  ( ) , // input wire m_axi_gmem2_5_ARREADY
                .m_axi_gmem2_5_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_5_RDATA
                .m_axi_gmem2_5_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_5_RRESP
                .m_axi_gmem2_5_RLAST    ( ) , // input wire m_axi_gmem2_5_RLAST
                .m_axi_gmem2_5_RVALID   ( ) , // input wire m_axi_gmem2_5_RVALID
                .m_axi_gmem2_5_RREADY   ( ) , // output wire m_axi_gmem2_5_RREADY
                .m_axi_gmem2_6_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_6_AWADDR
                .m_axi_gmem2_6_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_6_AWLEN
                .m_axi_gmem2_6_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_6_AWSIZE
                .m_axi_gmem2_6_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_6_AWBURST
                .m_axi_gmem2_6_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_6_AWLOCK
                .m_axi_gmem2_6_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_6_AWREGION
                .m_axi_gmem2_6_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_6_AWCACHE
                .m_axi_gmem2_6_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_6_AWPROT
                .m_axi_gmem2_6_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_6_AWQOS
                .m_axi_gmem2_6_AWVALID  ( ) , // output wire m_axi_gmem2_6_AWVALID
                .m_axi_gmem2_6_AWREADY  ( ) , // input wire m_axi_gmem2_6_AWREADY
                .m_axi_gmem2_6_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_6_WDATA
                .m_axi_gmem2_6_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_6_WSTRB
                .m_axi_gmem2_6_WLAST    ( ) , // output wire m_axi_gmem2_6_WLAST
                .m_axi_gmem2_6_WVALID   ( ) , // output wire m_axi_gmem2_6_WVALID
                .m_axi_gmem2_6_WREADY   ( ) , // input wire m_axi_gmem2_6_WREADY
                .m_axi_gmem2_6_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_6_BRESP
                .m_axi_gmem2_6_BVALID   ( ) , // input wire m_axi_gmem2_6_BVALID
                .m_axi_gmem2_6_BREADY   ( ) , // output wire m_axi_gmem2_6_BREADY
                .m_axi_gmem2_6_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_6_ARADDR
                .m_axi_gmem2_6_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_6_ARLEN
                .m_axi_gmem2_6_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_6_ARSIZE
                .m_axi_gmem2_6_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_6_ARBURST
                .m_axi_gmem2_6_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_6_ARLOCK
                .m_axi_gmem2_6_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_6_ARREGION
                .m_axi_gmem2_6_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_6_ARCACHE
                .m_axi_gmem2_6_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_6_ARPROT
                .m_axi_gmem2_6_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_6_ARQOS
                .m_axi_gmem2_6_ARVALID  ( ) , // output wire m_axi_gmem2_6_ARVALID
                .m_axi_gmem2_6_ARREADY  ( ) , // input wire m_axi_gmem2_6_ARREADY
                .m_axi_gmem2_6_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_6_RDATA
                .m_axi_gmem2_6_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_6_RRESP
                .m_axi_gmem2_6_RLAST    ( ) , // input wire m_axi_gmem2_6_RLAST
                .m_axi_gmem2_6_RVALID   ( ) , // input wire m_axi_gmem2_6_RVALID
                .m_axi_gmem2_6_RREADY   ( ) , // output wire m_axi_gmem2_6_RREADY
                .m_axi_gmem2_7_AWADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_7_AWADDR
                .m_axi_gmem2_7_AWLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_7_AWLEN
                .m_axi_gmem2_7_AWSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_7_AWSIZE
                .m_axi_gmem2_7_AWBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_7_AWBURST
                .m_axi_gmem2_7_AWLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_7_AWLOCK
                .m_axi_gmem2_7_AWREGION ( ) , // output wire [3 : 0] m_axi_gmem2_7_AWREGION
                .m_axi_gmem2_7_AWCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_7_AWCACHE
                .m_axi_gmem2_7_AWPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_7_AWPROT
                .m_axi_gmem2_7_AWQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_7_AWQOS
                .m_axi_gmem2_7_AWVALID  ( ) , // output wire m_axi_gmem2_7_AWVALID
                .m_axi_gmem2_7_AWREADY  ( ) , // input wire m_axi_gmem2_7_AWREADY
                .m_axi_gmem2_7_WDATA    ( ) , // output wire [63 : 0] m_axi_gmem2_7_WDATA
                .m_axi_gmem2_7_WSTRB    ( ) , // output wire [7 : 0] m_axi_gmem2_7_WSTRB
                .m_axi_gmem2_7_WLAST    ( ) , // output wire m_axi_gmem2_7_WLAST
                .m_axi_gmem2_7_WVALID   ( ) , // output wire m_axi_gmem2_7_WVALID
                .m_axi_gmem2_7_WREADY   ( ) , // input wire m_axi_gmem2_7_WREADY
                .m_axi_gmem2_7_BRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_7_BRESP
                .m_axi_gmem2_7_BVALID   ( ) , // input wire m_axi_gmem2_7_BVALID
                .m_axi_gmem2_7_BREADY   ( ) , // output wire m_axi_gmem2_7_BREADY
                .m_axi_gmem2_7_ARADDR   ( ) , // output wire [63 : 0] m_axi_gmem2_7_ARADDR
                .m_axi_gmem2_7_ARLEN    ( ) , // output wire [7 : 0] m_axi_gmem2_7_ARLEN
                .m_axi_gmem2_7_ARSIZE   ( ) , // output wire [2 : 0] m_axi_gmem2_7_ARSIZE
                .m_axi_gmem2_7_ARBURST  ( ) , // output wire [1 : 0] m_axi_gmem2_7_ARBURST
                .m_axi_gmem2_7_ARLOCK   ( ) , // output wire [1 : 0] m_axi_gmem2_7_ARLOCK
                .m_axi_gmem2_7_ARREGION ( ) , // output wire [3 : 0] m_axi_gmem2_7_ARREGION
                .m_axi_gmem2_7_ARCACHE  ( ) , // output wire [3 : 0] m_axi_gmem2_7_ARCACHE
                .m_axi_gmem2_7_ARPROT   ( ) , // output wire [2 : 0] m_axi_gmem2_7_ARPROT
                .m_axi_gmem2_7_ARQOS    ( ) , // output wire [3 : 0] m_axi_gmem2_7_ARQOS
                .m_axi_gmem2_7_ARVALID  ( ) , // output wire m_axi_gmem2_7_ARVALID
                .m_axi_gmem2_7_ARREADY  ( ) , // input wire m_axi_gmem2_7_ARREADY
                .m_axi_gmem2_7_RDATA    ( ) , // input wire [63 : 0] m_axi_gmem2_7_RDATA
                .m_axi_gmem2_7_RRESP    ( ) , // input wire [1 : 0] m_axi_gmem2_7_RRESP
                .m_axi_gmem2_7_RLAST    ( ) , // input wire m_axi_gmem2_7_RLAST
                .m_axi_gmem2_7_RVALID   ( ) , // input wire m_axi_gmem2_7_RVALID
                .m_axi_gmem2_7_RREADY   ( )   // output wire m_axi_gmem2_7_RREADY
            ) ;

            #endif
        end
    endgenerate

    //8-to-1 AXI MM interconnect
    host_axi_interconnect_0 axi_mm_X (
        .INTERCONNECT_ACLK           ( clk),
        .INTERCONNECT_ARESETN        ( rst_n),

        //: my $kn = NUM_KERNELS;
        //: for (my $i = 0; $i < $kn; $i++) {
        //:     my $s = sprintf("%02d", $i);
        //:     print qq(
        //:     .S${s}_AXI_ARESET_OUT_N        ( ),
        //:     .S${s}_AXI_ACLK                ( clk),
        //:     .S${s}_AXI_AWID                ( kernel_m_axi_snap_awid    [$i]),
        //:     .S${s}_AXI_AWADDR              ( kernel_m_axi_snap_awaddr  [$i]),
        //:     .S${s}_AXI_AWLEN               ( kernel_m_axi_snap_awlen   [$i]),
        //:     .S${s}_AXI_AWSIZE              ( kernel_m_axi_snap_awsize  [$i]),
        //:     .S${s}_AXI_AWBURST             ( kernel_m_axi_snap_awburst [$i]),
        //:     .S${s}_AXI_AWLOCK              ( kernel_m_axi_snap_awlock  [$i]),
        //:     .S${s}_AXI_AWCACHE             ( kernel_m_axi_snap_awcache [$i]),
        //:     .S${s}_AXI_AWPROT              ( kernel_m_axi_snap_awprot  [$i]),
        //:     .S${s}_AXI_AWQOS               ( kernel_m_axi_snap_awqos   [$i]),
        //:     .S${s}_AXI_AWVALID             ( kernel_m_axi_snap_awvalid [$i]),
        //:     .S${s}_AXI_AWREADY             ( kernel_m_axi_snap_awready [$i]),
        //:     .S${s}_AXI_WDATA               ( kernel_m_axi_snap_wdata   [$i]),
        //:     .S${s}_AXI_WSTRB               ( kernel_m_axi_snap_wstrb   [$i]),
        //:     .S${s}_AXI_WLAST               ( kernel_m_axi_snap_wlast   [$i]),
        //:     .S${s}_AXI_WVALID              ( kernel_m_axi_snap_wvalid  [$i]),
        //:     .S${s}_AXI_WREADY              ( kernel_m_axi_snap_wready  [$i]),
        //:     .S${s}_AXI_BID                 ( kernel_m_axi_snap_bid     [$i]),
        //:     .S${s}_AXI_BRESP               ( kernel_m_axi_snap_bresp   [$i]),
        //:     .S${s}_AXI_BVALID              ( kernel_m_axi_snap_bvalid  [$i]),
        //:     .S${s}_AXI_BREADY              ( kernel_m_axi_snap_bready  [$i]),
        //:     .S${s}_AXI_ARID                ( kernel_m_axi_snap_arid    [$i]),
        //:     .S${s}_AXI_ARADDR              ( kernel_m_axi_snap_araddr  [$i]),
        //:     .S${s}_AXI_ARLEN               ( kernel_m_axi_snap_arlen   [$i]),
        //:     .S${s}_AXI_ARSIZE              ( kernel_m_axi_snap_arsize  [$i]),
        //:     .S${s}_AXI_ARBURST             ( kernel_m_axi_snap_arburst [$i]),
        //:     .S${s}_AXI_ARLOCK              ( kernel_m_axi_snap_arlock  [$i]),
        //:     .S${s}_AXI_ARCACHE             ( kernel_m_axi_snap_arcache [$i]),
        //:     .S${s}_AXI_ARPROT              ( kernel_m_axi_snap_arprot  [$i]),
        //:     .S${s}_AXI_ARQOS               ( kernel_m_axi_snap_arqos   [$i]),
        //:     .S${s}_AXI_ARVALID             ( kernel_m_axi_snap_arvalid [$i]),
        //:     .S${s}_AXI_ARREADY             ( kernel_m_axi_snap_arready [$i]),
        //:     .S${s}_AXI_RID                 ( kernel_m_axi_snap_rid     [$i]),
        //:     .S${s}_AXI_RDATA               ( kernel_m_axi_snap_rdata   [$i]),
        //:     .S${s}_AXI_RRESP               ( kernel_m_axi_snap_rresp   [$i]),
        //:     .S${s}_AXI_RLAST               ( kernel_m_axi_snap_rlast   [$i]),
        //:     .S${s}_AXI_RVALID              ( kernel_m_axi_snap_rvalid  [$i]),
        //:     .S${s}_AXI_RREADY              ( kernel_m_axi_snap_rready  [$i]),
        //:     );
        //: }

        .M00_AXI_ARESET_OUT_N        ( ),
        .M00_AXI_ACLK                ( clk),
        .M00_AXI_AWID                ( m_axi_snap_awid),
        .M00_AXI_AWADDR              ( m_axi_snap_awaddr),
        .M00_AXI_AWLEN               ( m_axi_snap_awlen),
        .M00_AXI_AWSIZE              ( m_axi_snap_awsize),
        .M00_AXI_AWBURST             ( m_axi_snap_awburst),
        .M00_AXI_AWLOCK              ( m_axi_snap_awlock),
        .M00_AXI_AWCACHE             ( m_axi_snap_awcache),
        .M00_AXI_AWPROT              ( m_axi_snap_awprot),
        .M00_AXI_AWQOS               ( m_axi_snap_awqos),
        .M00_AXI_AWVALID             ( m_axi_snap_awvalid),
        .M00_AXI_AWREADY             ( m_axi_snap_awready),
        .M00_AXI_WDATA               ( m_axi_snap_wdata),
        .M00_AXI_WSTRB               ( m_axi_snap_wstrb),
        .M00_AXI_WLAST               ( m_axi_snap_wlast),
        .M00_AXI_WVALID              ( m_axi_snap_wvalid),
        .M00_AXI_WREADY              ( m_axi_snap_wready),
        .M00_AXI_BID                 ( m_axi_snap_bid),
        .M00_AXI_BRESP               ( m_axi_snap_bresp),
        .M00_AXI_BVALID              ( m_axi_snap_bvalid),
        .M00_AXI_BREADY              ( m_axi_snap_bready),
        .M00_AXI_ARID                ( m_axi_snap_arid),
        .M00_AXI_ARADDR              ( m_axi_snap_araddr),
        .M00_AXI_ARLEN               ( m_axi_snap_arlen),
        .M00_AXI_ARSIZE              ( m_axi_snap_arsize),
        .M00_AXI_ARBURST             ( m_axi_snap_arburst),
        .M00_AXI_ARLOCK              ( m_axi_snap_arlock),
        .M00_AXI_ARCACHE             ( m_axi_snap_arcache),
        .M00_AXI_ARPROT              ( m_axi_snap_arprot),
        .M00_AXI_ARQOS               ( m_axi_snap_arqos),
        .M00_AXI_ARVALID             ( m_axi_snap_arvalid),
        .M00_AXI_ARREADY             ( m_axi_snap_arready),
        .M00_AXI_RID                 ( m_axi_snap_rid),
        .M00_AXI_RDATA               ( m_axi_snap_rdata),
        .M00_AXI_RRESP               ( m_axi_snap_rresp),
        .M00_AXI_RLAST               ( m_axi_snap_rlast),
        .M00_AXI_RVALID              ( m_axi_snap_rvalid),
        .M00_AXI_RREADY              ( m_axi_snap_rready)
        );

    //1-to-8 AXI-lite crossbar (demux)
    host_axi_lite_crossbar_0 axi_lite_X (
        .aclk(clk)
        ,.aresetn(rst_n)
        ,.s_axi_awaddr( s_axi_snap_awaddr )
        ,.s_axi_awprot( s_axi_snap_awprot )
        ,.s_axi_awvalid( s_axi_snap_awvalid )
        ,.s_axi_awready( s_axi_snap_awready )
        ,.s_axi_wdata( s_axi_snap_wdata )
        ,.s_axi_wstrb( s_axi_snap_wstrb )
        ,.s_axi_wvalid( s_axi_snap_wvalid )
        ,.s_axi_wready( s_axi_snap_wready )
        ,.s_axi_bresp( s_axi_snap_bresp )
        ,.s_axi_bvalid( s_axi_snap_bvalid )
        ,.s_axi_bready( s_axi_snap_bready )
        ,.s_axi_araddr( s_axi_snap_araddr )
        ,.s_axi_arprot( s_axi_snap_arprot )
        ,.s_axi_arvalid( s_axi_snap_arvalid )
        ,.s_axi_arready( s_axi_snap_arready )
        ,.s_axi_rdata( s_axi_snap_rdata )
        ,.s_axi_rresp( s_axi_snap_rresp )
        ,.s_axi_rvalid( s_axi_snap_rvalid )
        ,.s_axi_rready( s_axi_snap_rready )

        //: my $kn = NUM_KERNELS;
        //: my @signals = qw(awaddr awprot awvalid awready wdata wstrb wvalid wready bresp bvalid bready araddr arprot arvalid arready rdata rresp rvalid rready);
        //: foreach my $si (@signals) {
        //:     print qq {
        //:     ,.m_axi_${si}(\{
        //:     };
        //:     for (my $i = $kn; $i >= 0; $i--) {
        //:         if ($i == 0) {
        //:             print qq(
        //:             kernel_s_axi_snap_${si}[$i]
        //:             );
        //:         } else {
        //:             print qq(
        //:             kernel_s_axi_snap_${si}[$i],
        //:             );
        //:         }
        //:     }
        //:     print qq {
        //:     \})
        //:     };
        //: }

        );

    axi_lite_global_slave #(
        .KERNEL_NUM   (KERNEL_NUM                     ),
        .DATA_WIDTH   (32                             ),
        .ADDR_WIDTH   (32                             )
    ) maxi_lite_global_slave (
        .clk                        (clk                   ),
        .rst_n                      (rst_n                 ),
        .s_axi_awready              (kernel_s_axi_snap_awready [ KERNEL_NUM]    ),
        .s_axi_awaddr               (kernel_s_axi_snap_awaddr  [ KERNEL_NUM]     ),//32b
        .s_axi_awprot               (kernel_s_axi_snap_awprot  [ KERNEL_NUM]     ),//3b
        .s_axi_awvalid              (kernel_s_axi_snap_awvalid [ KERNEL_NUM]    ),
        .s_axi_wready               (kernel_s_axi_snap_wready  [ KERNEL_NUM]     ),
        .s_axi_wdata                (kernel_s_axi_snap_wdata   [ KERNEL_NUM]      ),//32b
        .s_axi_wstrb                (kernel_s_axi_snap_wstrb   [ KERNEL_NUM]      ),//4b
        .s_axi_wvalid               (kernel_s_axi_snap_wvalid  [ KERNEL_NUM]     ),
        .s_axi_bresp                (kernel_s_axi_snap_bresp   [ KERNEL_NUM]      ),//2b
        .s_axi_bvalid               (kernel_s_axi_snap_bvalid  [ KERNEL_NUM]     ),
        .s_axi_bready               (kernel_s_axi_snap_bready  [ KERNEL_NUM]     ),
        .s_axi_arready              (kernel_s_axi_snap_arready [ KERNEL_NUM]    ),
        .s_axi_arvalid              (kernel_s_axi_snap_arvalid [ KERNEL_NUM]    ),
        .s_axi_araddr               (kernel_s_axi_snap_araddr  [ KERNEL_NUM]     ),//32b
        .s_axi_arprot               (kernel_s_axi_snap_arprot  [ KERNEL_NUM]     ),//3b
        .s_axi_rdata                (kernel_s_axi_snap_rdata   [ KERNEL_NUM]      ),//32b
        .s_axi_rresp                (kernel_s_axi_snap_rresp   [ KERNEL_NUM]      ),//2b
        .s_axi_rready               (kernel_s_axi_snap_rready  [ KERNEL_NUM]     ),
        .s_axi_rvalid               (kernel_s_axi_snap_rvalid  [ KERNEL_NUM]     ),
        .manager_start              (                                ),
        .run_mode                   (                                ),
        .init_addr                  (                                ),
        .completion_addr            (                                ),
        .completion_size            (                                ),
        .new_job                    (                                ),
        .job_done                   (                                ),
        .job_start                  (0                               ),
        .real_done                  (                                ),
        .kernel_start               (                                ),
        .i_action_type              (i_action_type                   ),
        .i_action_version           (i_action_version                ),
        .kernel_complete            ({KERNEL_NUM{1'b0}}              ),
        .kernel_complete_posedge    (                                ),
        .o_interrupt                (                                ),
        .i_interrupt_ack            (0                               )
        );

    // TODO: no job manager and completion manager for now.
    //completion_manager completion_manager0(
    //                        .clk                    (clk                    ),
    //                        .rst_n                  (rst_n                  ),
    //                        .kernel_start           (kernel_i_start         ),
    //                        .kernel_complete        (kernel_complete_p      ),
    //                        .system_register        (system_register        ),
    //                        .completion_addr        (completion_addr        ),
    //                        .completion_size        (completion_size        ),
    //                        .real_done              (real_done              ),
    //
    //                        //---- AXI bus interfaced with SNAP core ----
    //                          // AXI write address channel
    //                        .m_axi_awid        (job_m_axi_snap_awid        ),
    //                        .m_axi_awaddr      (job_m_axi_snap_awaddr      ),
    //                        .m_axi_awlen       (job_m_axi_snap_awlen       ),
    //                        .m_axi_awsize      (job_m_axi_snap_awsize      ),
    //                        .m_axi_awburst     (job_m_axi_snap_awburst     ),
    //                        .m_axi_awcache     (job_m_axi_snap_awcache     ),
    //                        .m_axi_awlock      (job_m_axi_snap_awlock      ),
    //                        .m_axi_awprot      (job_m_axi_snap_awprot      ),
    //                        .m_axi_awqos       (job_m_axi_snap_awqos       ),
    //                        .m_axi_awregion    (job_m_axi_snap_awregion    ),
    //                        .m_axi_awuser      (job_m_axi_snap_awuser      ),
    //                        .m_axi_awvalid     (job_m_axi_snap_awvalid     ),
    //                        .m_axi_awready     (job_m_axi_snap_awready     ),
    //                          // AXI write data channel
    //                        .m_axi_wid         (job_m_axi_snap_wid         ),
    //                        .m_axi_wdata       (job_m_axi_snap_wdata       ),
    //                        .m_axi_wstrb       (job_m_axi_snap_wstrb       ),
    //                        .m_axi_wlast       (job_m_axi_snap_wlast       ),
    //                        .m_axi_wvalid      (job_m_axi_snap_wvalid      ),
    //                        .m_axi_wready      (job_m_axi_snap_wready      ),
    //                          // AXI write response channel
    //                        .m_axi_bready      (job_m_axi_snap_bready      ),
    //                        .m_axi_bid         (job_m_axi_snap_bid         ),
    //                        .m_axi_bresp       (job_m_axi_snap_bresp       ),
    //                        .m_axi_bvalid      (job_m_axi_snap_bvalid      )
    //        );
    //
    //
    //job_manager job_manager0 (
    //                        .clk                    (clk                    ),
    //                        .rst_n                  (rst_n                  ),
    //                        .init_addr              (init_addr              ),
    //                        .manager_start          (manager_start          ),
    //                        .new_job                (new_job                ),
    //                        .job_done               (job_done               ),
    //                        .job_start              (job_start              ),
    //
    //                        //---- AXI bus interfaced with SNAP core ----
    //                          // AXI read address channel
    //                        .m_axi_arid        (job_m_axi_snap_arid        ),
    //                        .m_axi_araddr      (job_m_axi_snap_araddr      ),
    //                        .m_axi_arlen       (job_m_axi_snap_arlen       ),
    //                        .m_axi_arsize      (job_m_axi_snap_arsize      ),
    //                        .m_axi_arburst     (job_m_axi_snap_arburst     ),
    //                        .m_axi_aruser      (job_m_axi_snap_aruser      ),
    //                        .m_axi_arcache     (job_m_axi_snap_arcache     ),
    //                        .m_axi_arlock      (job_m_axi_snap_arlock      ),
    //                        .m_axi_arprot      (job_m_axi_snap_arprot      ),
    //                        .m_axi_arqos       (job_m_axi_snap_arqos       ),
    //                        .m_axi_arregion    (job_m_axi_snap_arregion    ),
    //                        .m_axi_arvalid     (job_m_axi_snap_arvalid     ),
    //                        .m_axi_arready     (job_m_axi_snap_arready     ),
    //                          // AXI  ead data channel
    //                        .m_axi_rready      (job_m_axi_snap_rready      ),
    //                        .m_axi_rid         (job_m_axi_snap_rid         ),
    //                        .m_axi_rdata       (job_m_axi_snap_rdata       ),
    //                        .m_axi_rresp       (job_m_axi_snap_rresp       ),
    //                        .m_axi_rlast       (job_m_axi_snap_rlast       ),
    //                        .m_axi_rvalid      (job_m_axi_snap_rvalid      ),
    //
    //                        .system_register        (system_register            ),
    //                        .user_register          (user_register              )
    //        );

endmodule
